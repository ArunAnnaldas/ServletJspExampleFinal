import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;
import java.lang.reflect.Field;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class TestPropertiesTest {

    @Mock
    private Logger loggerTestProperties;

    @InjectMocks
    private TestProperties testProperties;

    private Properties mockProps;

    @BeforeEach
    public void setUp() throws Exception {
        mockProps = new Properties();
        mockProps.setProperty("testKey", "testValue");

        // Use reflection to set the private static userProps field
        Field field = TestProperties.class.getDeclaredField("userProps");
        field.setAccessible(true);
        field.set(null, mockProps);
    }

    @Test
    public void testGetProperty() {
        String value = TestProperties.getProperty("testKey");
        assertEquals("testValue", value);
        verify(loggerTestProperties).info("Overriding testKey with global property value testValue");
    }

    @Test
    public void testGetPropertyNotFound() {
        String value = TestProperties.getProperty("nonExistentKey");
        assertNull(value);
        verify(loggerTestProperties).warn("Property nonExistentKey is not found");
    }

    @Test
    public void testSetProperty() {
        String value = TestProperties.setProperty("newKey", "newValue");
        assertEquals("newValue", value);
        assertEquals("newValue", TestProperties.getProperty("newKey"));
    }
}
