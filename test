import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

public class TestProperties {

    public static Logger loggerTestProperties = LoggerFactory.getLogger(TestProperties.class);
    private static final String GLOBAL_DEFAULT_PROPERTIES = System.getProperty("user.dir") + File.separator + "properties" + File.separator + "global.properties";
    private static Properties userProps = new Properties();

    static {
        try (FileInputStream fis = new FileInputStream(GLOBAL_DEFAULT_PROPERTIES)) {
            userProps.load(fis);
        } catch (IOException e) {
            loggerTestProperties.error("Failed to load global properties file.", e);
        }
    }

    public static String getProperty(String propertyName) {
        String propertyValue = userProps.getProperty(propertyName);
        if (propertyValue != null) {
            loggerTestProperties.info("Overriding " + propertyName + " with global property value " + propertyValue);
        } else {
            loggerTestProperties.warn("Property " + propertyName + " is not found");
        }
        return propertyValue;
    }

    public static String setProperty(String propertyName, String propertyValue) {
        userProps.setProperty(propertyName, propertyValue);
        return propertyValue;
    }
}




<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter-engine</artifactId>
    <version>5.7.1</version>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>org.mockito</groupId>
    <artifactId>mockito-core</artifactId>
    <version>3.7.7</version>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>org.slf4j</groupId>
    <artifactId>slf4j-api</artifactId>
    <version>1.7.30</version>
</dependency>
<dependency>
    <groupId>org.slf4j</groupId>
    <artifactId>slf4j-simple</artifactId>
    <version>1.7.30</version>
    <scope>test</scope>
</dependency>



import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class TestPropertiesTest {

    @Mock
    private Logger loggerTestProperties;

    @InjectMocks
    private TestProperties testProperties;

    private Properties mockProps;

    @BeforeEach
    public void setUp() throws IOException {
        mockProps = new Properties();
        mockProps.setProperty("testKey", "testValue");

        FileInputStream fis = mock(FileInputStream.class);
        when(fis.read(any(byte[].class))).thenAnswer(invocation -> {
            byte[] bytes = invocation.getArgument(0);
            System.arraycopy(mockProps.toString().getBytes(), 0, bytes, 0, mockProps.toString().length());
            return mockProps.toString().length();
        });

        doNothing().when(fis).close();

        TestProperties.userProps = mockProps;
    }

    @Test
    public void testGetProperty() {
        String value = TestProperties.getProperty("testKey");
        assertEquals("testValue", value);
        verify(loggerTestProperties).info("Overriding testKey with global property value testValue");
    }

    @Test
    public void testGetPropertyNotFound() {
        String value = TestProperties.getProperty("nonExistentKey");
        assertNull(value);
        verify(loggerTestProperties).warn("Property nonExistentKey is not found");
    }

    @Test
    public void testSetProperty() {
        String value = TestProperties.setProperty("newKey", "newValue");
        assertEquals("newValue", value);
        assertEquals("newValue", TestProperties.userProps.getProperty("newKey"));
    }
}
