import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
@SpringBootTest
public class TESPlayritePropertiesTest {

    @Autowired
    private TESPlayriteProperties tesPlayriteProperties;

    @Mock
    private TESPlayriteProperties.Playrite playrite;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testPlayriteProperties() {
        assertNotNull(tesPlayriteProperties);
        assertNotNull(playrite);
        
        when(playrite.isRemoteMode()).thenReturn(true);
        when(playrite.getBrowser()).thenReturn(BrowserCategory.CHROME);
        when(playrite.isHeadless()).thenReturn(true);

        tesPlayriteProperties.setPlayrite(playrite);

        assertEquals(true, tesPlayriteProperties.getPlayrite().isRemoteMode());
        assertEquals(BrowserCategory.CHROME, tesPlayriteProperties.getPlayrite().getBrowser());
        assertEquals(true, tesPlayriteProperties.getPlayrite().isHeadless());
    }

    @Configuration
    static class TestConfig {
        @Bean
        public TESPlayriteProperties tesPlayriteProperties() {
            return new TESPlayriteProperties();
        }

        @Bean
        public TESPlayriteProperties.Playrite playrite() {
            return new TESPlayriteProperties.Playrite();
        }
    }
}
